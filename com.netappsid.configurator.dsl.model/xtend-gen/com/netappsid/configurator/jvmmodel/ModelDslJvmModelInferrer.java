/**
 * generated by Xtext 2.9.1
 */
package com.netappsid.configurator.jvmmodel;

import com.google.inject.Inject;
import com.netappsid.configurator.modelDsl.Attribute;
import com.netappsid.configurator.modelDsl.Configurable;
import com.netappsid.configurator.modelDsl.DynamicEnum;
import com.netappsid.configurator.modelDsl.Property;
import java.util.Arrays;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler;
import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor.IPostIndexingInitializing;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class ModelDslJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  private XbaseCompiler xBaseCompiler;
  
  @Inject
  private Logger logger;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the closure you pass to the returned
   *            {@link IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
   *            initializeLater(..)}.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final com.netappsid.configurator.modelDsl.Enum configurable, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(configurable);
    JvmGenericType _class = this._jvmTypesBuilder.toClass(configurable, _fullyQualifiedName);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
    };
    acceptor.<JvmGenericType>accept(_class, _function);
  }
  
  protected void _infer(final DynamicEnum configurable, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(configurable);
    JvmGenericType _class = this._jvmTypesBuilder.toClass(configurable, _fullyQualifiedName);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
    };
    acceptor.<JvmGenericType>accept(_class, _function);
  }
  
  protected void _infer(final Configurable configurable, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(configurable);
    JvmGenericType _class = this._jvmTypesBuilder.toClass(configurable, _fullyQualifiedName);
    final Procedure1<JvmGenericType> _function = (JvmGenericType inferredClass) -> {
      try {
        this.generateConfigurable(configurable, inferredClass);
      } catch (final Throwable _t) {
        if (_t instanceof Exception) {
          final Exception e = (Exception)_t;
          this.logger.throwing("ModelDslJvmModelinferrer", "infer", e);
          String _message = e.getMessage();
          this.logger.log(Level.SEVERE, _message, e);
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    };
    acceptor.<JvmGenericType>accept(_class, _function);
  }
  
  private boolean generateConfigurable(final Configurable configurable, final JvmGenericType inferredClass) {
    boolean _xblockexpression = false;
    {
      final JvmTypeReference superType = configurable.getSuperType();
      boolean _isAbstract = configurable.isAbstract();
      inferredClass.setAbstract(_isAbstract);
      EList<Property> _properties = configurable.getProperties();
      final Consumer<Property> _function = (Property prop) -> {
        JvmTypeReference _type = prop.getType();
        final JvmTypeReference propertyType = this._typeReferenceBuilder.typeRef("com.bc360.configurator.property.impl.ValueProperty", _type);
        EList<JvmMember> _members = inferredClass.getMembers();
        String _name = prop.getName();
        final Procedure1<JvmField> _function_1 = (JvmField it) -> {
          String _name_1 = prop.getName();
          it.setSimpleName(_name_1);
          it.setVisibility(JvmVisibility.PRIVATE);
          it.setFinal(true);
          final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_1) -> {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("new ");
            String _simpleName = propertyType.getSimpleName();
            _builder.append(_simpleName, "");
            _builder.append("(\"");
            String _name_2 = prop.getName();
            _builder.append(_name_2, "");
            _builder.append("\")");
            it_1.append(_builder);
          };
          this._jvmTypesBuilder.setInitializer(it, _function_2);
        };
        JvmField _field = this._jvmTypesBuilder.toField(configurable, _name, propertyType, _function_1);
        this._jvmTypesBuilder.<JvmField>operator_add(_members, _field);
      };
      _properties.forEach(_function);
      EList<JvmMember> _members = inferredClass.getMembers();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Void.TYPE);
      final Procedure1<JvmOperation> _function_1 = (JvmOperation it) -> {
        final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable appender) -> {
          EList<Property> _properties_1 = configurable.getProperties();
          final Consumer<Property> _function_3 = (Property prop) -> {
            EList<Attribute> _attributes = prop.getAttributes();
            boolean _tripleNotEquals = (_attributes != null);
            if (_tripleNotEquals) {
              EList<Attribute> _attributes_1 = prop.getAttributes();
              final Consumer<Attribute> _function_4 = (Attribute it_1) -> {
                this.inferAttributeInit(it_1, prop, appender);
              };
              _attributes_1.forEach(_function_4);
            }
          };
          _properties_1.forEach(_function_3);
        };
        this._jvmTypesBuilder.setBody(it, _function_2);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(configurable, "init", _typeRef, _function_1);
      _xblockexpression = this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
    }
    return _xblockexpression;
  }
  
  public ITreeAppendable inferAttributeInit(final Attribute att, final Property prop, final ITreeAppendable it) {
    ITreeAppendable _xblockexpression = null;
    {
      String _name = prop.getName();
      it.append(_name);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(".setAttribute(");
      String _name_1 = att.getName();
      _builder.append(_name_1, "");
      _builder.append(", ");
      it.append(_builder);
      XExpression _expression = att.getExpression();
      this.xBaseCompiler.toJavaExpression(_expression, it);
      it.append(");");
      _xblockexpression = it.newLine();
    }
    return _xblockexpression;
  }
  
  public void infer(final EObject configurable, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (configurable instanceof Configurable) {
      _infer((Configurable)configurable, acceptor, isPreIndexingPhase);
      return;
    } else if (configurable instanceof DynamicEnum) {
      _infer((DynamicEnum)configurable, acceptor, isPreIndexingPhase);
      return;
    } else if (configurable instanceof com.netappsid.configurator.modelDsl.Enum) {
      _infer((com.netappsid.configurator.modelDsl.Enum)configurable, acceptor, isPreIndexingPhase);
      return;
    } else if (configurable != null) {
      _infer(configurable, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(configurable, acceptor, isPreIndexingPhase).toString());
    }
  }
}
